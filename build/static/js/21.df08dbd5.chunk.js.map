{"version":3,"file":"static/js/21.df08dbd5.chunk.js","mappings":"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","sources":["APIRequest/UsersAPI.js","Components/User/Registration.jsx"],"sourcesContent":["import {setToken, setUserDetails} from \"../Helper/SessionHelper\";\r\nimport store from \"../Redux/store/store\";\r\nimport {HideLoader, ShowLoader} from \"../Redux/state-slice/settings-slice\";\r\nimport axios from \"axios\";\r\nimport {ErrorToast, SuccessToast} from \"../Helper/FromHelper\";\r\nimport {BaseURL} from \"../Helper/config\";\r\n\r\n\r\nexport async function RegistrationRequest(email,name,password){\r\n    try {\r\n        store.dispatch(ShowLoader());\r\n        let URL = BaseURL + \"/register\";\r\n        let PostBody={email:email,name:name,password:password}\r\n        let res = await axios.post(URL,PostBody)\r\n        store.dispatch(HideLoader())\r\n        if (res.status===200){\r\n            if (res.data['status']===\"fail\"){\r\n                if (res.data['data']['keyPattern']['email']===1){\r\n                    ErrorToast(\"Email Already Exist\");\r\n                    return false;\r\n                }else {\r\n                    ErrorToast(\"Something Went Wrong\")\r\n                    return false;\r\n                }\r\n            }else {\r\n                SuccessToast(\"Registration Success\");\r\n                return true;\r\n            }\r\n        }else {\r\n            ErrorToast(\"Something Went Wrong\")\r\n            return false;\r\n        }\r\n    }catch (e) {\r\n        store.dispatch(HideLoader());\r\n        ErrorToast(\"Something Went Wrong\");\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\nexport async function LoginRequest(email,password){\r\n    try {\r\n        store.dispatch(ShowLoader());\r\n        let URL = BaseURL+\"/login\";\r\n        let PostBody = {\"email\":email, \"password\":password};\r\n        let res = await axios.post(URL,PostBody);\r\n        debugger\r\n        setToken(res.data['token']);\r\n        debugger\r\n        setUserDetails(res.data['data']);\r\n        SuccessToast(\"Login Success\");\r\n        store.dispatch(HideLoader());\r\n        return true;\r\n    }catch (e) {\r\n        store.dispatch(HideLoader())\r\n        ErrorToast(\"Invalid Email or Password\")\r\n        return false;\r\n    }\r\n}","import React, {useRef} from 'react';\r\nimport {Link, useNavigate} from \"react-router-dom\";\r\nimport {ErrorToast, IsEmail, IsEmpty} from \"../../Helper/FromHelper\";\r\nimport {RegistrationRequest} from \"../../APIRequest/UsersAPI\";\r\n\r\nconst Registration = () => {\r\n\r\n    let emailRef, nameRef, passwordRef = useRef();\r\n    let navigate = useNavigate();\r\n\r\n    const onRegistration = async ()=>{\r\n        let email = emailRef.value;\r\n        let name = nameRef.value;\r\n        let password = passwordRef.value;\r\n\r\n        if (IsEmail(email)){\r\n            ErrorToast(\"Valid Email Address Required !\")\r\n        } else if(IsEmpty(name)){\r\n            ErrorToast(\"Name Required !\")\r\n        } else if (IsEmpty(password)) {\r\n            ErrorToast(\"Password Required !\")\r\n        } else {\r\n            let result = await RegistrationRequest(email,name,password)\r\n            if (result === true){\r\n                navigate(\"/login\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <div className=\"col-md-10 col-lg-10 center-screen\">\r\n                    <div className=\"card w-100\">\r\n                        <div className=\"card-body\">\r\n                            <h4 className=\"text-start\">Sign Up</h4>\r\n                            <hr/>\r\n                            <div className=\"row m-0 p-0\">\r\n                                <div className=\"col-md-4 text-start p-2\">\r\n                                    <label>Email Address</label>\r\n                                    <input ref={(input) =>emailRef=input}  placeholder=\"User Email\" className=\"form-control\" type=\"email\"/>\r\n                                </div>\r\n                                <div className=\"col-md-4 text-start p-2\">\r\n                                    <label>Name</label>\r\n                                    <input ref={(input)=>nameRef=input} placeholder=\"User Name\" className=\"form-control\" type=\"text\"/>\r\n                                </div>\r\n                                <div className=\"col-md-4 text-start p-2\">\r\n                                    <label>Password</label>\r\n                                    <input ref={(input)=>passwordRef=input} placeholder=\"User Password\" className=\"form-control\" type=\"password\"/>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"row m-0  p-0\">\r\n                                <div className=\"col-md-4 text-start p-2\">\r\n                                    <button onClick={onRegistration} className=\"btn w-100 mt-2 btn-success\">Complete</button>\r\n                                    <Link className=\"text-center ms-3 h5\" to=\"/login\">Sign In</Link>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Registration;"],"names":["RegistrationRequest","_x","_x2","_x3","_RegistrationRequest","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","email","name","password","URL","PostBody","res","wrap","_context","prev","next","store","dispatch","ShowLoader","BaseURL","axios","post","sent","HideLoader","status","data","ErrorToast","abrupt","SuccessToast","t0","stop","LoginRequest","_x4","_x5","_LoginRequest","_callee2","_context2","setToken","setUserDetails","emailRef","nameRef","passwordRef","useRef","navigate","useNavigate","onRegistration","_ref","value","IsEmail","IsEmpty","_jsx","className","children","_jsxs","ref","input","placeholder","type","onClick","Link","to"],"sourceRoot":""}